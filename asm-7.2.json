[
    {
        "org.objectweb.asm.signature.SignatureWriter": [
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
                ],
                "methodSignature": "<org.objectweb.asm.signature.SignatureWriter: void visitFormalTypeParameter(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitFormalTypeParameter",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.signature.SignatureWriter: org.objectweb.asm.signature.SignatureVisitor visitClassBound()>",
                "unchecked_exceptions": [],
                "methodName": "visitClassBound",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
                ],
                "methodSignature": "<org.objectweb.asm.signature.SignatureWriter: org.objectweb.asm.signature.SignatureVisitor visitReturnType()>",
                "unchecked_exceptions": [],
                "methodName": "visitReturnType",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.signature.SignatureWriter: void endFormals()>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.signature.SignatureWriter: void <init>()>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.signature.SignatureVisitor: void <init>(int)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
                ],
                "methodSignature": "<org.objectweb.asm.signature.SignatureWriter: org.objectweb.asm.signature.SignatureVisitor visitParameterType()>",
                "unchecked_exceptions": [],
                "methodName": "visitParameterType",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.signature.SignatureWriter: void endFormals()>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
                ],
                "methodSignature": "<org.objectweb.asm.signature.SignatureWriter: void visitBaseType(char)>",
                "unchecked_exceptions": [],
                "methodName": "visitBaseType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
                ],
                "methodSignature": "<org.objectweb.asm.signature.SignatureWriter: org.objectweb.asm.signature.SignatureVisitor visitArrayType()>",
                "unchecked_exceptions": [],
                "methodName": "visitArrayType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
                ],
                "methodSignature": "<org.objectweb.asm.signature.SignatureWriter: org.objectweb.asm.signature.SignatureVisitor visitExceptionType()>",
                "unchecked_exceptions": [],
                "methodName": "visitExceptionType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
                ],
                "methodSignature": "<org.objectweb.asm.signature.SignatureWriter: org.objectweb.asm.signature.SignatureVisitor visitInterfaceBound()>",
                "unchecked_exceptions": [],
                "methodName": "visitInterfaceBound",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.signature.SignatureWriter: org.objectweb.asm.signature.SignatureVisitor visitInterface()>",
                "unchecked_exceptions": [],
                "methodName": "visitInterface",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
                ],
                "methodSignature": "<org.objectweb.asm.signature.SignatureWriter: void visitTypeVariable(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitTypeVariable",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
                ],
                "methodSignature": "<org.objectweb.asm.signature.SignatureWriter: void visitTypeArgument()>",
                "unchecked_exceptions": [],
                "methodName": "visitTypeArgument",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
                ],
                "methodSignature": "<org.objectweb.asm.signature.SignatureWriter: void visitEnd()>",
                "unchecked_exceptions": [],
                "methodName": "visitEnd",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.signature.SignatureWriter: void endArguments()>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.signature.SignatureWriter: org.objectweb.asm.signature.SignatureVisitor visitSuperclass()>",
                "unchecked_exceptions": [],
                "methodName": "visitSuperclass",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.signature.SignatureWriter: void endFormals()>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
                ],
                "methodSignature": "<org.objectweb.asm.signature.SignatureWriter: void endArguments()>",
                "unchecked_exceptions": [],
                "methodName": "endArguments",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.signature.SignatureWriter: void visitClassType(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitClassType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.signature.SignatureWriter: java.lang.String toString()>",
                "unchecked_exceptions": [],
                "methodName": "toString",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
                ],
                "methodSignature": "<org.objectweb.asm.signature.SignatureWriter: org.objectweb.asm.signature.SignatureVisitor visitTypeArgument(char)>",
                "unchecked_exceptions": [],
                "methodName": "visitTypeArgument",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
                ],
                "methodSignature": "<org.objectweb.asm.signature.SignatureWriter: void endFormals()>",
                "unchecked_exceptions": [],
                "methodName": "endFormals",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.signature.SignatureWriter: void visitInnerClassType(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitInnerClassType",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.signature.SignatureWriter: void endArguments()>"
                ],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.signature.SignatureVisitor": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.signature.SignatureVisitor: void visitFormalTypeParameter(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitFormalTypeParameter",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.signature.SignatureVisitor: void visitTypeVariable(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitTypeVariable",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.signature.SignatureVisitor: org.objectweb.asm.signature.SignatureVisitor visitTypeArgument(char)>",
                "unchecked_exceptions": [],
                "methodName": "visitTypeArgument",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.signature.SignatureVisitor: org.objectweb.asm.signature.SignatureVisitor visitInterfaceBound()>",
                "unchecked_exceptions": [],
                "methodName": "visitInterfaceBound",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.signature.SignatureVisitor: org.objectweb.asm.signature.SignatureVisitor visitReturnType()>",
                "unchecked_exceptions": [],
                "methodName": "visitReturnType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.signature.SignatureVisitor: org.objectweb.asm.signature.SignatureVisitor visitSuperclass()>",
                "unchecked_exceptions": [],
                "methodName": "visitSuperclass",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.signature.SignatureVisitor: org.objectweb.asm.signature.SignatureVisitor visitExceptionType()>",
                "unchecked_exceptions": [],
                "methodName": "visitExceptionType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.signature.SignatureVisitor: void visitBaseType(char)>",
                "unchecked_exceptions": [],
                "methodName": "visitBaseType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.signature.SignatureVisitor: org.objectweb.asm.signature.SignatureVisitor visitParameterType()>",
                "unchecked_exceptions": [],
                "methodName": "visitParameterType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.signature.SignatureVisitor: org.objectweb.asm.signature.SignatureVisitor visitArrayType()>",
                "unchecked_exceptions": [],
                "methodName": "visitArrayType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.signature.SignatureVisitor: org.objectweb.asm.signature.SignatureVisitor visitInterface()>",
                "unchecked_exceptions": [],
                "methodName": "visitInterface",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.signature.SignatureVisitor: void visitInnerClassType(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitInnerClassType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.signature.SignatureVisitor: org.objectweb.asm.signature.SignatureVisitor visitClassBound()>",
                "unchecked_exceptions": [],
                "methodName": "visitClassBound",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.signature.SignatureVisitor: void visitTypeArgument()>",
                "unchecked_exceptions": [],
                "methodName": "visitTypeArgument",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.signature.SignatureVisitor: void visitEnd()>",
                "unchecked_exceptions": [],
                "methodName": "visitEnd",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>",
                    "<java.lang.StringBuilder: void <init>()>",
                    "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.signature.SignatureVisitor: void <init>(int)>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.signature.SignatureVisitor: void visitClassType(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitClassType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.signature.SignatureReader": [
            {
                "external_method_calls": [
                    "<java.lang.IllegalArgumentException: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.signature.SignatureReader: int parseType(java.lang.String,int,org.objectweb.asm.signature.SignatureVisitor)>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "parseType",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.signature.SignatureVisitor: void visitInnerClassType(java.lang.String)>",
                    "<org.objectweb.asm.signature.SignatureVisitor: void visitClassType(java.lang.String)>",
                    "<org.objectweb.asm.signature.SignatureVisitor: void visitEnd()>",
                    "<org.objectweb.asm.signature.SignatureVisitor: void visitInnerClassType(java.lang.String)>",
                    "<org.objectweb.asm.signature.SignatureVisitor: void visitClassType(java.lang.String)>",
                    "<org.objectweb.asm.signature.SignatureVisitor: void visitTypeArgument()>",
                    "<org.objectweb.asm.signature.SignatureVisitor: void visitBaseType(char)>",
                    "<org.objectweb.asm.signature.SignatureVisitor: void visitTypeVariable(java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.signature.SignatureReader: void <init>(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.signature.SignatureReader: void acceptType(org.objectweb.asm.signature.SignatureVisitor)>",
                "unchecked_exceptions": [],
                "methodName": "acceptType",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.signature.SignatureReader: int parseType(java.lang.String,int,org.objectweb.asm.signature.SignatureVisitor)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.signature.SignatureReader: void accept(org.objectweb.asm.signature.SignatureVisitor)>",
                "unchecked_exceptions": [],
                "methodName": "accept",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.signature.SignatureVisitor: void visitFormalTypeParameter(java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.TypeReference": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.TypeReference: org.objectweb.asm.TypeReference newTypeParameterReference(int,int)>",
                "unchecked_exceptions": [],
                "methodName": "newTypeParameterReference",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.TypeReference: void <init>(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.TypeReference: int getSort()>",
                "unchecked_exceptions": [],
                "methodName": "getSort",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.TypeReference: org.objectweb.asm.TypeReference newFormalParameterReference(int)>",
                "unchecked_exceptions": [],
                "methodName": "newFormalParameterReference",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.TypeReference: void <init>(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.TypeReference: int getSuperTypeIndex()>",
                "unchecked_exceptions": [],
                "methodName": "getSuperTypeIndex",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.TypeReference: int getTryCatchBlockIndex()>",
                "unchecked_exceptions": [],
                "methodName": "getTryCatchBlockIndex",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.TypeReference: int getTypeArgumentIndex()>",
                "unchecked_exceptions": [],
                "methodName": "getTypeArgumentIndex",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.TypeReference: org.objectweb.asm.TypeReference newTypeReference(int)>",
                "unchecked_exceptions": [],
                "methodName": "newTypeReference",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.TypeReference: void <init>(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.IllegalArgumentException: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.TypeReference: void putTarget(int,org.objectweb.asm.ByteVector)>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "putTarget",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.TypeReference: int getValue()>",
                "unchecked_exceptions": [],
                "methodName": "getValue",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.TypeReference: org.objectweb.asm.TypeReference newTypeArgumentReference(int,int)>",
                "unchecked_exceptions": [],
                "methodName": "newTypeArgumentReference",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.TypeReference: void <init>(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.TypeReference: org.objectweb.asm.TypeReference newSuperTypeReference(int)>",
                "unchecked_exceptions": [],
                "methodName": "newSuperTypeReference",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.TypeReference: void <init>(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.TypeReference: org.objectweb.asm.TypeReference newExceptionReference(int)>",
                "unchecked_exceptions": [],
                "methodName": "newExceptionReference",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.TypeReference: void <init>(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.TypeReference: int getFormalParameterIndex()>",
                "unchecked_exceptions": [],
                "methodName": "getFormalParameterIndex",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.TypeReference: org.objectweb.asm.TypeReference newTypeParameterBoundReference(int,int,int)>",
                "unchecked_exceptions": [],
                "methodName": "newTypeParameterBoundReference",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.TypeReference: void <init>(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.TypeReference: int getTypeParameterBoundIndex()>",
                "unchecked_exceptions": [],
                "methodName": "getTypeParameterBoundIndex",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.TypeReference: int getExceptionIndex()>",
                "unchecked_exceptions": [],
                "methodName": "getExceptionIndex",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.TypeReference: int getTypeParameterIndex()>",
                "unchecked_exceptions": [],
                "methodName": "getTypeParameterIndex",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.TypeReference: void <init>(int)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.TypeReference: org.objectweb.asm.TypeReference newTryCatchReference(int)>",
                "unchecked_exceptions": [],
                "methodName": "newTryCatchReference",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.TypeReference: void <init>(int)>"
                ],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.TypePath": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.TypePath: void put(org.objectweb.asm.TypePath,org.objectweb.asm.ByteVector)>",
                "unchecked_exceptions": [],
                "methodName": "put",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.TypePath: void <init>(byte[],int)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.TypePath: int getLength()>",
                "unchecked_exceptions": [],
                "methodName": "getLength",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.TypePath: int getStepArgument(int)>",
                "unchecked_exceptions": [],
                "methodName": "getStepArgument",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.TypePath: int getStep(int)>",
                "unchecked_exceptions": [],
                "methodName": "getStep",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: void <init>(int)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.AssertionError: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.TypePath: java.lang.String toString()>",
                "unchecked_exceptions": [
                    "java.lang.AssertionError"
                ],
                "methodName": "toString",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError"
                ]
            },
            {
                "external_method_calls": [
                    "<java.lang.IllegalArgumentException: void <init>()>",
                    "<java.lang.IllegalArgumentException: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.TypePath: org.objectweb.asm.TypePath fromString(java.lang.String)>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException",
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "fromString",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void <init>(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put11(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put11(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put11(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put11(int,int)>",
                    "<org.objectweb.asm.TypePath: void <init>(byte[],int)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            }
        ]
    },
    {
        "org.objectweb.asm.Type": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: java.lang.String getInternalName()>",
                "unchecked_exceptions": [],
                "methodName": "getInternalName",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>",
                "unchecked_exceptions": [],
                "methodName": "getInternalName",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: org.objectweb.asm.Type getReturnType()>",
                "unchecked_exceptions": [],
                "methodName": "getReturnType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.IllegalArgumentException: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Type: org.objectweb.asm.Type getTypeInternal(java.lang.String,int,int)>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "getTypeInternal",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>",
                    "<org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>",
                    "<org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: org.objectweb.asm.Type getMethodType(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "getMethodType",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: void <init>()>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
                ],
                "methodSignature": "<org.objectweb.asm.Type: java.lang.String getMethodDescriptor(java.lang.reflect.Method)>",
                "unchecked_exceptions": [],
                "methodName": "getMethodDescriptor",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Type: void appendDescriptor(java.lang.Class,java.lang.StringBuilder)>",
                    "<org.objectweb.asm.Type: void appendDescriptor(java.lang.Class,java.lang.StringBuilder)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: org.objectweb.asm.Type getElementType()>",
                "unchecked_exceptions": [],
                "methodName": "getElementType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: org.objectweb.asm.Type getReturnType(java.lang.reflect.Method)>",
                "unchecked_exceptions": [],
                "methodName": "getReturnType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: int getArgumentsAndReturnSizes(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "getArgumentsAndReturnSizes",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "getObjectType",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.AssertionError: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>",
                "unchecked_exceptions": [
                    "java.lang.AssertionError"
                ],
                "methodName": "getType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: org.objectweb.asm.Type[] getArgumentTypes(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "getArgumentTypes",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: int getDimensions()>",
                "unchecked_exceptions": [],
                "methodName": "getDimensions",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: org.objectweb.asm.Type[] getArgumentTypes()>",
                "unchecked_exceptions": [],
                "methodName": "getArgumentTypes",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: int getArgumentsAndReturnSizes()>",
                "unchecked_exceptions": [],
                "methodName": "getArgumentsAndReturnSizes",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Type: java.lang.String getDescriptor(java.lang.Class)>",
                "unchecked_exceptions": [],
                "methodName": "getDescriptor",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Type: void appendDescriptor(java.lang.Class,java.lang.StringBuilder)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: java.lang.String toString()>",
                "unchecked_exceptions": [],
                "methodName": "toString",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "getType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.AssertionError: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Type: int getSize()>",
                "unchecked_exceptions": [
                    "java.lang.AssertionError"
                ],
                "methodName": "getSize",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: int hashCode()>",
                "unchecked_exceptions": [],
                "methodName": "hashCode",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.UnsupportedOperationException: void <init>()>",
                    "<java.lang.UnsupportedOperationException: void <init>()>",
                    "<java.lang.AssertionError: void <init>()>",
                    "<java.lang.UnsupportedOperationException: void <init>()>",
                    "<java.lang.AssertionError: void <init>()>",
                    "<java.lang.UnsupportedOperationException: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Type: int getOpcode(int)>",
                "unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException",
                    "java.lang.UnsupportedOperationException",
                    "java.lang.AssertionError",
                    "java.lang.UnsupportedOperationException",
                    "java.lang.AssertionError",
                    "java.lang.UnsupportedOperationException"
                ],
                "methodName": "getOpcode",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError",
                    "java.lang.UnsupportedOperationException"
                ]
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>"
                ],
                "methodSignature": "<org.objectweb.asm.Type: void appendDescriptor(java.lang.StringBuilder)>",
                "unchecked_exceptions": [],
                "methodName": "appendDescriptor",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.AssertionError: void <init>()>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
                ],
                "methodSignature": "<org.objectweb.asm.Type: void appendDescriptor(java.lang.Class,java.lang.StringBuilder)>",
                "unchecked_exceptions": [
                    "java.lang.AssertionError"
                ],
                "methodName": "appendDescriptor",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: org.objectweb.asm.Type[] getArgumentTypes(java.lang.reflect.Method)>",
                "unchecked_exceptions": [],
                "methodName": "getArgumentTypes",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: void <init>(java.lang.String)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
                    "<java.lang.AssertionError: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Type: java.lang.String getClassName()>",
                "unchecked_exceptions": [
                    "java.lang.AssertionError"
                ],
                "methodName": "getClassName",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: int getSort()>",
                "unchecked_exceptions": [],
                "methodName": "getSort",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: void <init>()>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
                ],
                "methodSignature": "<org.objectweb.asm.Type: java.lang.String getMethodDescriptor(org.objectweb.asm.Type,org.objectweb.asm.Type[])>",
                "unchecked_exceptions": [],
                "methodName": "getMethodDescriptor",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Type: void appendDescriptor(java.lang.StringBuilder)>",
                    "<org.objectweb.asm.Type: void appendDescriptor(java.lang.StringBuilder)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Type: java.lang.String getDescriptor()>",
                "unchecked_exceptions": [],
                "methodName": "getDescriptor",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: void <init>()>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
                ],
                "methodSignature": "<org.objectweb.asm.Type: java.lang.String getConstructorDescriptor(java.lang.reflect.Constructor)>",
                "unchecked_exceptions": [],
                "methodName": "getConstructorDescriptor",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Type: void appendDescriptor(java.lang.Class,java.lang.StringBuilder)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: boolean equals(java.lang.Object)>",
                "unchecked_exceptions": [],
                "methodName": "equals",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: org.objectweb.asm.Type getReturnType(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "getReturnType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.reflect.Method)>",
                "unchecked_exceptions": [],
                "methodName": "getType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: org.objectweb.asm.Type getMethodType(org.objectweb.asm.Type,org.objectweb.asm.Type[])>",
                "unchecked_exceptions": [],
                "methodName": "getMethodType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.reflect.Constructor)>",
                "unchecked_exceptions": [],
                "methodName": "getType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: int getReturnTypeOffset(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "getReturnTypeOffset",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Type: void <clinit>()>",
                "unchecked_exceptions": [],
                "methodName": "<clinit>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>",
                    "<org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>",
                    "<org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>",
                    "<org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>",
                    "<org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>",
                    "<org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>",
                    "<org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>",
                    "<org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>",
                    "<org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>"
                ],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.SymbolTable": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol addConstantInvokeDynamic(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])>",
                "unchecked_exceptions": [],
                "methodName": "addConstantInvokeDynamic",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.SymbolTable$Entry get(int)>",
                "unchecked_exceptions": [],
                "methodName": "get",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol addConstantInteger(int)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantInteger",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: void addConstantMethodHandle(int,int,java.lang.String,java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantMethodHandle",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,long,int)>",
                    "<org.objectweb.asm.SymbolTable: void add(org.objectweb.asm.SymbolTable$Entry)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol addConstantDouble(double)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantDouble",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: void addConstantNameAndType(int,java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantNameAndType",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,java.lang.String,int)>",
                    "<org.objectweb.asm.SymbolTable: void add(org.objectweb.asm.SymbolTable$Entry)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: int setMajorVersionAndClassName(int,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "setMajorVersionAndClassName",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "hash",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol addConstantPackage(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantPackage",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol getType(int)>",
                "unchecked_exceptions": [],
                "methodName": "getType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol addConstantFloat(float)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantFloat",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol addConstantString(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantString",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantUtf8",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putUTF8(java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,int)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)>",
                "unchecked_exceptions": [],
                "methodName": "hash",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "hash",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: int hash(int,long)>",
                "unchecked_exceptions": [],
                "methodName": "hash",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: void putConstantPool(org.objectweb.asm.ByteVector)>",
                "unchecked_exceptions": [],
                "methodName": "putConstantPool",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: void addConstantDynamicOrInvokeDynamicReference(int,int,java.lang.String,java.lang.String,int)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantDynamicOrInvokeDynamicReference",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,long,int)>",
                    "<org.objectweb.asm.SymbolTable: void add(org.objectweb.asm.SymbolTable$Entry)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"
                ],
                "methodSignature": "<org.objectweb.asm.SymbolTable: int addTypeInternal(org.objectweb.asm.SymbolTable$Entry)>",
                "unchecked_exceptions": [],
                "methodName": "addTypeInternal",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)>",
                "unchecked_exceptions": [],
                "methodName": "hash",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol addConstantUtf8Reference(int,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantUtf8Reference",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.SymbolTable: void <init>(org.objectweb.asm.ClassWriter)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void <init>()>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol addConstantLong(long)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantLong",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol addConstantDynamic(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])>",
                "unchecked_exceptions": [],
                "methodName": "addConstantDynamic",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol addBootstrapMethod(org.objectweb.asm.Handle,java.lang.Object[])>",
                "unchecked_exceptions": [],
                "methodName": "addBootstrapMethod",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void <init>()>",
                    "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol addConstant(java.lang.Object)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.SymbolTable$Entry put(org.objectweb.asm.SymbolTable$Entry)>",
                "unchecked_exceptions": [],
                "methodName": "put",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol addConstantClass(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantClass",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol addConstantLongOrDouble(int,long)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantLongOrDouble",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putLong(long)>",
                    "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,long,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: int hash(int,int)>",
                "unchecked_exceptions": [],
                "methodName": "hash",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: void addConstantLongOrDouble(int,int,long)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantLongOrDouble",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,long,int)>",
                    "<org.objectweb.asm.SymbolTable: void add(org.objectweb.asm.SymbolTable$Entry)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.ClassReader getSource()>",
                "unchecked_exceptions": [],
                "methodName": "getSource",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>",
                    "<java.lang.IllegalArgumentException: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.SymbolTable: void <init>(org.objectweb.asm.ClassWriter,org.objectweb.asm.ClassReader)>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void <init>(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>",
                    "<org.objectweb.asm.SymbolTable: void addConstantUtf8(int,java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: void addConstantIntegerOrFloat(int,int,int)>",
                    "<org.objectweb.asm.SymbolTable: void addConstantLongOrDouble(int,int,long)>",
                    "<org.objectweb.asm.SymbolTable: void addConstantMemberReference(int,int,java.lang.String,java.lang.String,java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: void addConstantNameAndType(int,java.lang.String,java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: void addConstantMethodHandle(int,int,java.lang.String,java.lang.String,java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: void addConstantDynamicOrInvokeDynamicReference(int,int,java.lang.String,java.lang.String,int)>",
                    "<org.objectweb.asm.SymbolTable: void addConstantUtf8Reference(int,int,java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: void copyBootstrapMethods(org.objectweb.asm.ClassReader,char[])>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol addConstantMethodType(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantMethodType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: int addType(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "addType",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol addBootstrapMethod(int,int,int)>",
                "unchecked_exceptions": [],
                "methodName": "addBootstrapMethod",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,long,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.SymbolTable$Entry addConstantMemberReference(int,java.lang.String,java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantMemberReference",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put122(int,int,int)>",
                    "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,long,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: int computeBootstrapMethodsSize()>",
                "unchecked_exceptions": [],
                "methodName": "computeBootstrapMethodsSize",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "hash",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: void addConstantMemberReference(int,int,java.lang.String,java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantMemberReference",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,long,int)>",
                    "<org.objectweb.asm.SymbolTable: void add(org.objectweb.asm.SymbolTable$Entry)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: void addConstantUtf8Reference(int,int,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantUtf8Reference",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,int)>",
                    "<org.objectweb.asm.SymbolTable: void add(org.objectweb.asm.SymbolTable$Entry)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol addConstantModule(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantModule",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: void addConstantIntegerOrFloat(int,int,int)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantIntegerOrFloat",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,long,int)>",
                    "<org.objectweb.asm.SymbolTable: void add(org.objectweb.asm.SymbolTable$Entry)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: int addUninitializedType(java.lang.String,int)>",
                "unchecked_exceptions": [],
                "methodName": "addUninitializedType",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,long,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol addConstantIntegerOrFloat(int,int)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantIntegerOrFloat",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>",
                    "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,long,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: void putBootstrapMethods(org.objectweb.asm.ByteVector)>",
                "unchecked_exceptions": [],
                "methodName": "putBootstrapMethods",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: void <init>()>",
                    "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol addConstant(java.lang.Object)>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "addConstant",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: int getConstantPoolCount()>",
                "unchecked_exceptions": [],
                "methodName": "getConstantPoolCount",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: void add(org.objectweb.asm.SymbolTable$Entry)>",
                "unchecked_exceptions": [],
                "methodName": "add",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol addConstantMethodref(java.lang.String,java.lang.String,java.lang.String,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantMethodref",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: int addConstantNameAndType(java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantNameAndType",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put122(int,int,int)>",
                    "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,java.lang.String,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: void copyBootstrapMethods(org.objectweb.asm.ClassReader,char[])>",
                "unchecked_exceptions": [],
                "methodName": "copyBootstrapMethods",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void <init>(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>",
                    "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,long,int)>",
                    "<org.objectweb.asm.SymbolTable: void add(org.objectweb.asm.SymbolTable$Entry)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: java.lang.String getClassName()>",
                "unchecked_exceptions": [],
                "methodName": "getClassName",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol addConstantDynamicOrInvokeDynamicReference(int,java.lang.String,java.lang.String,int)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantDynamicOrInvokeDynamicReference",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put122(int,int,int)>",
                    "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,long,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: int getConstantPoolLength()>",
                "unchecked_exceptions": [],
                "methodName": "getConstantPoolLength",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: void addConstantUtf8(int,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantUtf8",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,int)>",
                    "<org.objectweb.asm.SymbolTable: void add(org.objectweb.asm.SymbolTable$Entry)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: int addMergedType(int,int)>",
                "unchecked_exceptions": [],
                "methodName": "addMergedType",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,long,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: int getMajorVersion()>",
                "unchecked_exceptions": [],
                "methodName": "getMajorVersion",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol addConstantMethodHandle(int,java.lang.String,java.lang.String,java.lang.String,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantMethodHandle",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put112(int,int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put112(int,int,int)>",
                    "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,long,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>",
                "unchecked_exceptions": [],
                "methodName": "hash",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable: org.objectweb.asm.Symbol addConstantFieldref(java.lang.String,java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "addConstantFieldref",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.SymbolTable$Entry": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,java.lang.String,int)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Symbol: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,long)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,int)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Symbol: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,long)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,long,int)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Symbol: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,long)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,long,int)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Symbol: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,long)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,long,int)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Symbol: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,long)>"
                ],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.Symbol": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Symbol: int getArgumentsAndReturnSizes()>",
                "unchecked_exceptions": [],
                "methodName": "getArgumentsAndReturnSizes",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Symbol: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,long)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.Opcodes": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Opcodes: void <clinit>()>",
                "unchecked_exceptions": [],
                "methodName": "<clinit>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.ModuleWriter": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ModuleWriter: void visitExport(java.lang.String,int,java.lang.String[])>",
                "unchecked_exceptions": [],
                "methodName": "visitExport",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ModuleWriter: int computeAttributesSize()>",
                "unchecked_exceptions": [],
                "methodName": "computeAttributesSize",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ModuleWriter: void visitUse(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitUse",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ModuleWriter: void visitProvide(java.lang.String,java.lang.String[])>",
                "unchecked_exceptions": [],
                "methodName": "visitProvide",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ModuleWriter: void visitEnd()>",
                "unchecked_exceptions": [],
                "methodName": "visitEnd",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ModuleWriter: void putAttributes(org.objectweb.asm.ByteVector)>",
                "unchecked_exceptions": [],
                "methodName": "putAttributes",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ModuleWriter: int getAttributeCount()>",
                "unchecked_exceptions": [],
                "methodName": "getAttributeCount",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ModuleWriter: void visitMainClass(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitMainClass",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ModuleWriter: void visitPackage(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitPackage",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ModuleWriter: void visitRequire(java.lang.String,int,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitRequire",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ModuleWriter: void visitOpen(java.lang.String,int,java.lang.String[])>",
                "unchecked_exceptions": [],
                "methodName": "visitOpen",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ModuleWriter: void <init>(org.objectweb.asm.SymbolTable,int,int,int)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ModuleVisitor: void <init>(int)>",
                    "<org.objectweb.asm.ByteVector: void <init>()>",
                    "<org.objectweb.asm.ByteVector: void <init>()>",
                    "<org.objectweb.asm.ByteVector: void <init>()>",
                    "<org.objectweb.asm.ByteVector: void <init>()>",
                    "<org.objectweb.asm.ByteVector: void <init>()>",
                    "<org.objectweb.asm.ByteVector: void <init>()>"
                ],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.ModuleVisitor": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ModuleVisitor: void visitOpen(java.lang.String,int,java.lang.String[])>",
                "unchecked_exceptions": [],
                "methodName": "visitOpen",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ModuleVisitor: void visitOpen(java.lang.String,int,java.lang.String[])>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>",
                    "<java.lang.StringBuilder: void <init>()>",
                    "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.ModuleVisitor: void <init>(int,org.objectweb.asm.ModuleVisitor)>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ModuleVisitor: void visitEnd()>",
                "unchecked_exceptions": [],
                "methodName": "visitEnd",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ModuleVisitor: void visitEnd()>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ModuleVisitor: void visitMainClass(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitMainClass",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ModuleVisitor: void visitMainClass(java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ModuleVisitor: void visitExport(java.lang.String,int,java.lang.String[])>",
                "unchecked_exceptions": [],
                "methodName": "visitExport",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ModuleVisitor: void visitExport(java.lang.String,int,java.lang.String[])>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ModuleVisitor: void visitProvide(java.lang.String,java.lang.String[])>",
                "unchecked_exceptions": [],
                "methodName": "visitProvide",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ModuleVisitor: void visitProvide(java.lang.String,java.lang.String[])>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ModuleVisitor: void visitUse(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitUse",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ModuleVisitor: void visitUse(java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ModuleVisitor: void <init>(int)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ModuleVisitor: void <init>(int,org.objectweb.asm.ModuleVisitor)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ModuleVisitor: void visitPackage(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitPackage",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ModuleVisitor: void visitPackage(java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ModuleVisitor: void visitRequire(java.lang.String,int,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitRequire",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ModuleVisitor: void visitRequire(java.lang.String,int,java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.MethodWriter": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: org.objectweb.asm.AnnotationVisitor visitTryCatchAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "visitTryCatchAnnotation",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: int computeMethodInfoSize()>",
                "unchecked_exceptions": [
                    "org.objectweb.asm.MethodTooLargeException"
                ],
                "methodName": "computeMethodInfoSize",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodTooLargeException: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>",
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": [
                    "org.objectweb.asm.MethodTooLargeException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitAbstractType(int,int)>",
                "unchecked_exceptions": [],
                "methodName": "visitAbstractType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitMaxs(int,int)>",
                "unchecked_exceptions": [],
                "methodName": "visitMaxs",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodWriter: void computeAllFrames()>",
                    "<org.objectweb.asm.MethodWriter: void computeMaxStackAndLocal()>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>",
                "unchecked_exceptions": [],
                "methodName": "visitLocalVariable",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void <init>()>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: void <init>()>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitFrameEnd()>",
                "unchecked_exceptions": [],
                "methodName": "visitFrameEnd",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void <init>()>",
                    "<org.objectweb.asm.MethodWriter: void putFrame()>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitMultiANewArrayInsn(java.lang.String,int)>",
                "unchecked_exceptions": [],
                "methodName": "visitMultiANewArrayInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>",
                    "<org.objectweb.asm.Frame: void execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError",
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: org.objectweb.asm.AnnotationVisitor visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "visitLocalVariableAnnotation",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void <init>()>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.TypePath: void put(org.objectweb.asm.TypePath,org.objectweb.asm.ByteVector)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.AnnotationWriter: void <init>(org.objectweb.asm.SymbolTable,boolean,org.objectweb.asm.ByteVector,org.objectweb.asm.AnnotationWriter)>",
                    "<org.objectweb.asm.AnnotationWriter: void <init>(org.objectweb.asm.SymbolTable,boolean,org.objectweb.asm.ByteVector,org.objectweb.asm.AnnotationWriter)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitLineNumber(int,org.objectweb.asm.Label)>",
                "unchecked_exceptions": [],
                "methodName": "visitLineNumber",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void <init>()>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitInsn(int)>",
                "unchecked_exceptions": [],
                "methodName": "visitInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>",
                    "<org.objectweb.asm.Frame: void execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)>",
                    "<org.objectweb.asm.MethodWriter: void endCurrentBasicBlockWithNoSuccessor()>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError",
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitAttribute(org.objectweb.asm.Attribute)>",
                "unchecked_exceptions": [],
                "methodName": "visitAttribute",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void collectAttributePrototypes(org.objectweb.asm.Attribute$Set)>",
                "unchecked_exceptions": [],
                "methodName": "collectAttributePrototypes",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Attribute$Set: void addAttributes(org.objectweb.asm.Attribute)>",
                    "<org.objectweb.asm.Attribute$Set: void addAttributes(org.objectweb.asm.Attribute)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void putMethodInfo(org.objectweb.asm.ByteVector)>",
                "unchecked_exceptions": [],
                "methodName": "putMethodInfo",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>",
                    "<org.objectweb.asm.Handler: void putExceptionTable(org.objectweb.asm.Handler,org.objectweb.asm.ByteVector)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>",
                    "<org.objectweb.asm.AnnotationWriter: void putAnnotations(int,org.objectweb.asm.ByteVector)>",
                    "<org.objectweb.asm.AnnotationWriter: void putAnnotations(int,org.objectweb.asm.ByteVector)>",
                    "<org.objectweb.asm.Attribute: void putAttributes(org.objectweb.asm.SymbolTable,byte[],int,int,int,org.objectweb.asm.ByteVector)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.Attribute: void putAttributes(org.objectweb.asm.SymbolTable,int,int,org.objectweb.asm.ByteVector)>",
                    "<org.objectweb.asm.AnnotationWriter: void putAnnotations(org.objectweb.asm.SymbolTable,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.ByteVector)>",
                    "<org.objectweb.asm.AnnotationWriter: void putParameterAnnotations(int,org.objectweb.asm.AnnotationWriter[],int,org.objectweb.asm.ByteVector)>",
                    "<org.objectweb.asm.AnnotationWriter: void putParameterAnnotations(int,org.objectweb.asm.AnnotationWriter[],int,org.objectweb.asm.ByteVector)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>",
                    "<org.objectweb.asm.Attribute: void putAttributes(org.objectweb.asm.SymbolTable,org.objectweb.asm.ByteVector)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])>",
                "unchecked_exceptions": [],
                "methodName": "visitInvokeDynamicInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.Frame: void execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError",
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void computeMaxStackAndLocal()>",
                "unchecked_exceptions": [],
                "methodName": "computeMaxStackAndLocal",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Edge: void <init>(int,org.objectweb.asm.Label,org.objectweb.asm.Edge)>",
                    "<org.objectweb.asm.Edge: void <init>(int,org.objectweb.asm.Label,org.objectweb.asm.Edge)>",
                    "<org.objectweb.asm.Label: void markSubroutine(short)>",
                    "<org.objectweb.asm.Label: void markSubroutine(short)>",
                    "<org.objectweb.asm.Label: void addSubroutineRetSuccessors(org.objectweb.asm.Label)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitEnd()>",
                "unchecked_exceptions": [],
                "methodName": "visitEnd",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: boolean hasAsmInstructions()>",
                "unchecked_exceptions": [],
                "methodName": "hasAsmInstructions",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: org.objectweb.asm.AnnotationVisitor visitAnnotationDefault()>",
                "unchecked_exceptions": [],
                "methodName": "visitAnnotationDefault",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void <init>()>",
                    "<org.objectweb.asm.AnnotationWriter: void <init>(org.objectweb.asm.SymbolTable,boolean,org.objectweb.asm.ByteVector,org.objectweb.asm.AnnotationWriter)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: boolean canCopyMethodAttributes(org.objectweb.asm.ClassReader,boolean,boolean,int,int,int)>",
                "unchecked_exceptions": [],
                "methodName": "canCopyMethodAttributes",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitParameter(java.lang.String,int)>",
                "unchecked_exceptions": [],
                "methodName": "visitParameter",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void <init>()>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "visitMethodInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put11(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.Frame: void execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError",
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitLdcInsn(java.lang.Object)>",
                "unchecked_exceptions": [],
                "methodName": "visitLdcInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put11(int,int)>",
                    "<org.objectweb.asm.Frame: void execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError",
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitSwitchInsn(org.objectweb.asm.Label,org.objectweb.asm.Label[])>",
                "unchecked_exceptions": [],
                "methodName": "visitSwitchInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Frame: void execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)>",
                    "<org.objectweb.asm.MethodWriter: void addSuccessorToCurrentBasicBlock(int,org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.MethodWriter: void addSuccessorToCurrentBasicBlock(int,org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.MethodWriter: void addSuccessorToCurrentBasicBlock(int,org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.MethodWriter: void addSuccessorToCurrentBasicBlock(int,org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.MethodWriter: void endCurrentBasicBlockWithNoSuccessor()>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError",
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: org.objectweb.asm.AnnotationVisitor visitInsnAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "visitInsnAnnotation",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
                    "<java.lang.IllegalStateException: void <init>()>",
                    "<java.lang.IllegalArgumentException: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException",
                    "java.lang.IllegalStateException",
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "visitFrame",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.CurrentFrame: void <init>(org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.Frame: void setInputFrameFromDescriptor(org.objectweb.asm.SymbolTable,int,java.lang.String,int)>",
                    "<org.objectweb.asm.Frame: void accept(org.objectweb.asm.MethodWriter)>",
                    "<org.objectweb.asm.Frame: void setInputFrameFromApiFormat(org.objectweb.asm.SymbolTable,int,java.lang.Object[],int,java.lang.Object[])>",
                    "<org.objectweb.asm.Frame: void accept(org.objectweb.asm.MethodWriter)>",
                    "<org.objectweb.asm.Label: void <init>()>",
                    "<org.objectweb.asm.Frame: void <init>(org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.Frame: void setInputFrameFromDescriptor(org.objectweb.asm.SymbolTable,int,java.lang.String,int)>",
                    "<org.objectweb.asm.Frame: void accept(org.objectweb.asm.MethodWriter)>",
                    "<org.objectweb.asm.MethodWriter: void visitFrameEnd()>",
                    "<org.objectweb.asm.ByteVector: void <init>()>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.MethodWriter: void putFrameType(java.lang.Object)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.MethodWriter: void putFrameType(java.lang.Object)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.MethodWriter: void putFrameType(java.lang.Object)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.MethodWriter: void putFrameType(java.lang.Object)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalStateException",
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitIntInsn(int,int)>",
                "unchecked_exceptions": [],
                "methodName": "visitIntInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put11(int,int)>",
                    "<org.objectweb.asm.Frame: void execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError",
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitTryCatchBlock",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Handler: void <init>(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,int,java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void addSuccessorToCurrentBasicBlock(int,org.objectweb.asm.Label)>",
                "unchecked_exceptions": [],
                "methodName": "addSuccessorToCurrentBasicBlock",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Edge: void <init>(int,org.objectweb.asm.Label,org.objectweb.asm.Edge)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void putAbstractTypes(int,int)>",
                "unchecked_exceptions": [],
                "methodName": "putAbstractTypes",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Frame: void putAbstractType(org.objectweb.asm.SymbolTable,int,org.objectweb.asm.ByteVector)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: boolean hasFrames()>",
                "unchecked_exceptions": [],
                "methodName": "hasFrames",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void computeAllFrames()>",
                "unchecked_exceptions": [],
                "methodName": "computeAllFrames",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Edge: void <init>(int,org.objectweb.asm.Label,org.objectweb.asm.Edge)>",
                    "<org.objectweb.asm.Frame: void setInputFrameFromDescriptor(org.objectweb.asm.SymbolTable,int,java.lang.String,int)>",
                    "<org.objectweb.asm.Frame: void accept(org.objectweb.asm.MethodWriter)>",
                    "<org.objectweb.asm.Frame: void accept(org.objectweb.asm.MethodWriter)>",
                    "<org.objectweb.asm.MethodWriter: void visitFrameEnd()>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void <init>(org.objectweb.asm.SymbolTable,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[],int)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void <init>(int)>",
                    "<org.objectweb.asm.ByteVector: void <init>()>",
                    "<org.objectweb.asm.Label: void <init>()>",
                    "<org.objectweb.asm.MethodWriter: void visitLabel(org.objectweb.asm.Label)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "visitParameterAnnotation",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitAnnotableParameterCount(int,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "visitAnnotableParameterCount",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitFieldInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.Frame: void execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError",
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: int visitFrameStart(int,int,int)>",
                "unchecked_exceptions": [],
                "methodName": "visitFrameStart",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])>",
                "unchecked_exceptions": [],
                "methodName": "visitTableSwitchInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>",
                    "<org.objectweb.asm.Label: void put(org.objectweb.asm.ByteVector,int,boolean)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>",
                    "<org.objectweb.asm.Label: void put(org.objectweb.asm.ByteVector,int,boolean)>",
                    "<org.objectweb.asm.MethodWriter: void visitSwitchInsn(org.objectweb.asm.Label,org.objectweb.asm.Label[])>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitCode()>",
                "unchecked_exceptions": [],
                "methodName": "visitCode",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitJumpInsn(int,org.objectweb.asm.Label)>",
                "unchecked_exceptions": [],
                "methodName": "visitJumpInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>",
                    "<org.objectweb.asm.Label: void put(org.objectweb.asm.ByteVector,int,boolean)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>",
                    "<org.objectweb.asm.Label: void put(org.objectweb.asm.ByteVector,int,boolean)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>",
                    "<org.objectweb.asm.Label: void put(org.objectweb.asm.ByteVector,int,boolean)>",
                    "<org.objectweb.asm.Frame: void execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)>",
                    "<org.objectweb.asm.MethodWriter: void addSuccessorToCurrentBasicBlock(int,org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.Label: void <init>()>",
                    "<org.objectweb.asm.Frame: void execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)>",
                    "<org.objectweb.asm.MethodWriter: void addSuccessorToCurrentBasicBlock(int,org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.Label: void <init>()>",
                    "<org.objectweb.asm.MethodWriter: void addSuccessorToCurrentBasicBlock(int,org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.MethodWriter: void visitLabel(org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.MethodWriter: void endCurrentBasicBlockWithNoSuccessor()>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError",
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void putFrameType(java.lang.Object)>",
                "unchecked_exceptions": [],
                "methodName": "putFrameType",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitTypeInsn(int,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitTypeInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.Frame: void execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError",
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void endCurrentBasicBlockWithNoSuccessor()>",
                "unchecked_exceptions": [],
                "methodName": "endCurrentBasicBlockWithNoSuccessor",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Label: void <init>()>",
                    "<org.objectweb.asm.Frame: void <init>(org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.Label: boolean resolve(byte[],int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitVarInsn(int,int)>",
                "unchecked_exceptions": [],
                "methodName": "visitVarInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put11(int,int)>",
                    "<org.objectweb.asm.Frame: void execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)>",
                    "<org.objectweb.asm.MethodWriter: void endCurrentBasicBlockWithNoSuccessor()>",
                    "<org.objectweb.asm.Label: void <init>()>",
                    "<org.objectweb.asm.MethodWriter: void visitLabel(org.objectweb.asm.Label)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError",
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitLabel(org.objectweb.asm.Label)>",
                "unchecked_exceptions": [],
                "methodName": "visitLabel",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodWriter: void addSuccessorToCurrentBasicBlock(int,org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.Frame: void <init>(org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.MethodWriter: void addSuccessorToCurrentBasicBlock(int,org.objectweb.asm.Label)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitIincInsn(int,int)>",
                "unchecked_exceptions": [],
                "methodName": "visitIincInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put11(int,int)>",
                    "<org.objectweb.asm.Frame: void execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError",
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void <clinit>()>",
                "unchecked_exceptions": [],
                "methodName": "<clinit>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void putFrame()>",
                "unchecked_exceptions": [],
                "methodName": "putFrame",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.MethodWriter: void putAbstractTypes(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.MethodWriter: void putAbstractTypes(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>",
                    "<org.objectweb.asm.MethodWriter: void putAbstractTypes(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.MethodWriter: void putAbstractTypes(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.MethodWriter: void putAbstractTypes(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.MethodWriter: void putAbstractTypes(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.MethodWriter: void putAbstractTypes(int,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])>",
                "unchecked_exceptions": [],
                "methodName": "visitLookupSwitchInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>",
                    "<org.objectweb.asm.Label: void put(org.objectweb.asm.ByteVector,int,boolean)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>",
                    "<org.objectweb.asm.Label: void put(org.objectweb.asm.ByteVector,int,boolean)>",
                    "<org.objectweb.asm.MethodWriter: void visitSwitchInsn(org.objectweb.asm.Label,org.objectweb.asm.Label[])>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: void setMethodAttributesSource(int,int)>",
                "unchecked_exceptions": [],
                "methodName": "setMethodAttributesSource",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "visitAnnotation",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodWriter: org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "visitTypeAnnotation",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.MethodVisitor": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitAnnotableParameterCount(int,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "visitAnnotableParameterCount",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitAnnotableParameterCount(int,boolean)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>",
                "unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ],
                "methodName": "visitMethodInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>",
                    "<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ]
            },
            {
                "external_method_calls": [
                    "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitInsnAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)>",
                "unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ],
                "methodName": "visitInsnAnnotation",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitCode()>",
                "unchecked_exceptions": [],
                "methodName": "visitCode",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitCode()>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>",
                "unchecked_exceptions": [],
                "methodName": "visitJumpInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>",
                    "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>",
                "unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException",
                    "java.lang.UnsupportedOperationException"
                ],
                "methodName": "visitLdcInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>",
                "unchecked_exceptions": [],
                "methodName": "visitLabel",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])>",
                "unchecked_exceptions": [],
                "methodName": "visitLookupSwitchInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitTryCatchAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)>",
                "unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ],
                "methodName": "visitTryCatchAnnotation",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)>",
                "unchecked_exceptions": [],
                "methodName": "visitMaxs",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)>",
                "unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ],
                "methodName": "visitTypeAnnotation",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ]
            },
            {
                "external_method_calls": [
                    "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitParameter(java.lang.String,int)>",
                "unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ],
                "methodName": "visitParameter",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitParameter(java.lang.String,int)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "visitAnnotation",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitFieldInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitEnd()>",
                "unchecked_exceptions": [],
                "methodName": "visitEnd",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitEnd()>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>",
                "unchecked_exceptions": [],
                "methodName": "visitFrame",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitInsn(int)>",
                "unchecked_exceptions": [],
                "methodName": "visitInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitInsn(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])>",
                "unchecked_exceptions": [],
                "methodName": "visitTableSwitchInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitLineNumber(int,org.objectweb.asm.Label)>",
                "unchecked_exceptions": [],
                "methodName": "visitLineNumber",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitLineNumber(int,org.objectweb.asm.Label)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>",
                "unchecked_exceptions": [],
                "methodName": "visitVarInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>",
                    "<java.lang.StringBuilder: void <init>()>",
                    "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void <init>(int,org.objectweb.asm.MethodVisitor)>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotationDefault()>",
                "unchecked_exceptions": [],
                "methodName": "visitAnnotationDefault",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitMethodInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitTypeInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitAttribute(org.objectweb.asm.Attribute)>",
                "unchecked_exceptions": [],
                "methodName": "visitAttribute",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitAttribute(org.objectweb.asm.Attribute)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>",
                "unchecked_exceptions": [],
                "methodName": "visitLocalVariable",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "visitParameterAnnotation",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void <init>(int)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void <init>(int,org.objectweb.asm.MethodVisitor)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitMultiANewArrayInsn(java.lang.String,int)>",
                "unchecked_exceptions": [],
                "methodName": "visitMultiANewArrayInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitMultiANewArrayInsn(java.lang.String,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])>",
                "unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ],
                "methodName": "visitInvokeDynamicInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitIincInsn(int,int)>",
                "unchecked_exceptions": [],
                "methodName": "visitIincInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitIincInsn(int,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean)>",
                "unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ],
                "methodName": "visitLocalVariableAnnotation",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitIntInsn(int,int)>",
                "unchecked_exceptions": [],
                "methodName": "visitIntInsn",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitIntInsn(int,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodVisitor: void visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitTryCatchBlock",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.MethodTooLargeException": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodTooLargeException: java.lang.String getDescriptor()>",
                "unchecked_exceptions": [],
                "methodName": "getDescriptor",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodTooLargeException: int getCodeSize()>",
                "unchecked_exceptions": [],
                "methodName": "getCodeSize",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: void <init>()>",
                    "<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.MethodTooLargeException: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodTooLargeException: java.lang.String getClassName()>",
                "unchecked_exceptions": [],
                "methodName": "getClassName",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.MethodTooLargeException: java.lang.String getMethodName()>",
                "unchecked_exceptions": [],
                "methodName": "getMethodName",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.Label": [
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Label: java.lang.String toString()>",
                "unchecked_exceptions": [],
                "methodName": "toString",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Label: void put(org.objectweb.asm.ByteVector,int,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "put",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Label: void addForwardReference(int,int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>",
                    "<org.objectweb.asm.Label: void addForwardReference(int,int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"
                ],
                "methodSignature": "<org.objectweb.asm.Label: void addLineNumber(int)>",
                "unchecked_exceptions": [],
                "methodName": "addLineNumber",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Label: void <init>()>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Label: void addSubroutineRetSuccessors(org.objectweb.asm.Label)>",
                "unchecked_exceptions": [],
                "methodName": "addSubroutineRetSuccessors",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Edge: void <init>(int,org.objectweb.asm.Label,org.objectweb.asm.Edge)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Label: void <clinit>()>",
                "unchecked_exceptions": [],
                "methodName": "<clinit>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Label: void <init>()>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Label: void markSubroutine(short)>",
                "unchecked_exceptions": [],
                "methodName": "markSubroutine",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Label: boolean resolve(byte[],int)>",
                "unchecked_exceptions": [],
                "methodName": "resolve",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"
                ],
                "methodSignature": "<org.objectweb.asm.Label: void addForwardReference(int,int,int)>",
                "unchecked_exceptions": [],
                "methodName": "addForwardReference",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Label: org.objectweb.asm.Label pushSuccessors(org.objectweb.asm.Label)>",
                "unchecked_exceptions": [],
                "methodName": "pushSuccessors",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Label: org.objectweb.asm.Label getCanonicalInstance()>",
                "unchecked_exceptions": [],
                "methodName": "getCanonicalInstance",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.IllegalStateException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.Label: int getOffset()>",
                "unchecked_exceptions": [
                    "java.lang.IllegalStateException"
                ],
                "methodName": "getOffset",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalStateException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Label: void accept(org.objectweb.asm.MethodVisitor,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "accept",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.MethodVisitor: void visitLineNumber(int,org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.MethodVisitor: void visitLineNumber(int,org.objectweb.asm.Label)>"
                ],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.Handler": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Handler: void <init>(org.objectweb.asm.Handler,org.objectweb.asm.Label,org.objectweb.asm.Label)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Handler: void <init>(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,int,java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Handler: org.objectweb.asm.Handler removeRange(org.objectweb.asm.Handler,org.objectweb.asm.Label,org.objectweb.asm.Label)>",
                "unchecked_exceptions": [],
                "methodName": "removeRange",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Handler: void <init>(org.objectweb.asm.Handler,org.objectweb.asm.Label,org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.Handler: void <init>(org.objectweb.asm.Handler,org.objectweb.asm.Label,org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.Handler: void <init>(org.objectweb.asm.Handler,org.objectweb.asm.Label,org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.Handler: void <init>(org.objectweb.asm.Handler,org.objectweb.asm.Label,org.objectweb.asm.Label)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Handler: void putExceptionTable(org.objectweb.asm.Handler,org.objectweb.asm.ByteVector)>",
                "unchecked_exceptions": [],
                "methodName": "putExceptionTable",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Handler: int getExceptionTableLength(org.objectweb.asm.Handler)>",
                "unchecked_exceptions": [],
                "methodName": "getExceptionTableLength",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Handler: void <init>(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,int,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Handler: int getExceptionTableSize(org.objectweb.asm.Handler)>",
                "unchecked_exceptions": [],
                "methodName": "getExceptionTableSize",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.Handle": [
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Handle: java.lang.String toString()>",
                "unchecked_exceptions": [],
                "methodName": "toString",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Handle: java.lang.String getOwner()>",
                "unchecked_exceptions": [],
                "methodName": "getOwner",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Handle: int getTag()>",
                "unchecked_exceptions": [],
                "methodName": "getTag",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Handle: void <init>(int,java.lang.String,java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Handle: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Handle: int hashCode()>",
                "unchecked_exceptions": [],
                "methodName": "hashCode",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Handle: boolean isInterface()>",
                "unchecked_exceptions": [],
                "methodName": "isInterface",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Handle: java.lang.String getName()>",
                "unchecked_exceptions": [],
                "methodName": "getName",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Handle: boolean equals(java.lang.Object)>",
                "unchecked_exceptions": [],
                "methodName": "equals",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Handle: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Handle: java.lang.String getDesc()>",
                "unchecked_exceptions": [],
                "methodName": "getDesc",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.Frame": [
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: void <init>()>",
                    "<java.lang.IllegalArgumentException: void <init>()>",
                    "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
                    "<java.lang.AssertionError: void <init>()>",
                    "<java.lang.IllegalArgumentException: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Frame: void execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException",
                    "java.lang.IllegalArgumentException",
                    "java.lang.AssertionError",
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "execute",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(org.objectweb.asm.SymbolTable,java.lang.String)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void pop(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void pop(int)>",
                    "<org.objectweb.asm.Frame: void setLocal(int,int)>",
                    "<org.objectweb.asm.Frame: void setLocal(int,int)>",
                    "<org.objectweb.asm.Frame: void setLocal(int,int)>",
                    "<org.objectweb.asm.Frame: void setLocal(int,int)>",
                    "<org.objectweb.asm.Frame: void setLocal(int,int)>",
                    "<org.objectweb.asm.Frame: void setLocal(int,int)>",
                    "<org.objectweb.asm.Frame: void setLocal(int,int)>",
                    "<org.objectweb.asm.Frame: void pop(int)>",
                    "<org.objectweb.asm.Frame: void pop(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void pop(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void pop(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void pop(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void setLocal(int,int)>",
                    "<org.objectweb.asm.Frame: void pop(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void pop(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void pop(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void pop(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void pop(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void pop(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void pop(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void pop(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void pop(int)>",
                    "<org.objectweb.asm.Frame: void push(org.objectweb.asm.SymbolTable,java.lang.String)>",
                    "<org.objectweb.asm.Frame: void pop(java.lang.String)>",
                    "<org.objectweb.asm.Frame: void pop(int)>",
                    "<org.objectweb.asm.Frame: void push(org.objectweb.asm.SymbolTable,java.lang.String)>",
                    "<org.objectweb.asm.Frame: void pop(java.lang.String)>",
                    "<org.objectweb.asm.Frame: int pop()>",
                    "<org.objectweb.asm.Frame: void pop(java.lang.String)>",
                    "<org.objectweb.asm.Frame: void addInitializedType(int)>",
                    "<org.objectweb.asm.Frame: void push(org.objectweb.asm.SymbolTable,java.lang.String)>",
                    "<org.objectweb.asm.Frame: void pop(java.lang.String)>",
                    "<org.objectweb.asm.Frame: void push(org.objectweb.asm.SymbolTable,java.lang.String)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: int pop()>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: int pop()>",
                    "<org.objectweb.asm.Frame: void push(org.objectweb.asm.SymbolTable,java.lang.String)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: int pop()>",
                    "<org.objectweb.asm.Frame: void push(org.objectweb.asm.SymbolTable,java.lang.String)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void pop(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void pop(int)>",
                    "<org.objectweb.asm.Frame: void push(org.objectweb.asm.SymbolTable,java.lang.String)>",
                    "<org.objectweb.asm.Frame: void pop(int)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError",
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Frame: int getConcreteOutputType(int,int)>",
                "unchecked_exceptions": [],
                "methodName": "getConcreteOutputType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Frame: boolean merge(org.objectweb.asm.SymbolTable,org.objectweb.asm.Frame,int)>",
                "unchecked_exceptions": [],
                "methodName": "merge",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Frame: int getInputStackSize()>",
                "unchecked_exceptions": [],
                "methodName": "getInputStackSize",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: void <init>()>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
                    "<java.lang.AssertionError: void <init>()>",
                    "<java.lang.AssertionError: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Frame: void putAbstractType(org.objectweb.asm.SymbolTable,int,org.objectweb.asm.ByteVector)>",
                "unchecked_exceptions": [
                    "java.lang.AssertionError",
                    "java.lang.AssertionError"
                ],
                "methodName": "putAbstractType",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Frame: void setInputFrameFromDescriptor(org.objectweb.asm.SymbolTable,int,java.lang.String,int)>",
                "unchecked_exceptions": [],
                "methodName": "setInputFrameFromDescriptor",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Frame: boolean merge(org.objectweb.asm.SymbolTable,int,int[],int)>",
                "unchecked_exceptions": [],
                "methodName": "merge",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.IllegalArgumentException: void <init>()>",
                    "<java.lang.IllegalArgumentException: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Frame: int getAbstractTypeFromDescriptor(org.objectweb.asm.SymbolTable,java.lang.String,int)>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException",
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "getAbstractTypeFromDescriptor",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Frame: void pop(int)>",
                "unchecked_exceptions": [],
                "methodName": "pop",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Frame: int getAbstractTypeFromApiFormat(org.objectweb.asm.SymbolTable,java.lang.Object)>",
                "unchecked_exceptions": [],
                "methodName": "getAbstractTypeFromApiFormat",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Frame: int getInitializedType(org.objectweb.asm.SymbolTable,int)>",
                "unchecked_exceptions": [],
                "methodName": "getInitializedType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Frame: void copyFrom(org.objectweb.asm.Frame)>",
                "unchecked_exceptions": [],
                "methodName": "copyFrom",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"
                ],
                "methodSignature": "<org.objectweb.asm.Frame: void setLocal(int,int)>",
                "unchecked_exceptions": [],
                "methodName": "setLocal",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"
                ],
                "methodSignature": "<org.objectweb.asm.Frame: void push(int)>",
                "unchecked_exceptions": [],
                "methodName": "push",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Frame: void pop(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "pop",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Frame: void pop(int)>",
                    "<org.objectweb.asm.Frame: void pop(int)>",
                    "<org.objectweb.asm.Frame: void pop(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Frame: void <init>(org.objectweb.asm.Label)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Frame: int getAbstractTypeFromInternalName(org.objectweb.asm.SymbolTable,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "getAbstractTypeFromInternalName",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Frame: void accept(org.objectweb.asm.MethodWriter)>",
                "unchecked_exceptions": [],
                "methodName": "accept",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodWriter: void visitAbstractType(int,int)>",
                    "<org.objectweb.asm.MethodWriter: void visitAbstractType(int,int)>",
                    "<org.objectweb.asm.MethodWriter: void visitFrameEnd()>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"
                ],
                "methodSignature": "<org.objectweb.asm.Frame: void addInitializedType(int)>",
                "unchecked_exceptions": [],
                "methodName": "addInitializedType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Frame: void push(org.objectweb.asm.SymbolTable,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "push",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Frame: void push(int)>",
                    "<org.objectweb.asm.Frame: void push(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Frame: int pop()>",
                "unchecked_exceptions": [],
                "methodName": "pop",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Frame: void setInputFrameFromApiFormat(org.objectweb.asm.SymbolTable,int,java.lang.Object[],int,java.lang.Object[])>",
                "unchecked_exceptions": [],
                "methodName": "setInputFrameFromApiFormat",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Frame: int getLocal(int)>",
                "unchecked_exceptions": [],
                "methodName": "getLocal",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.FieldWriter": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.FieldWriter: org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "visitTypeAnnotation",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.FieldWriter: void visitAttribute(org.objectweb.asm.Attribute)>",
                "unchecked_exceptions": [],
                "methodName": "visitAttribute",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.FieldWriter: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "visitAnnotation",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.FieldWriter: void visitEnd()>",
                "unchecked_exceptions": [],
                "methodName": "visitEnd",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.FieldWriter: int computeFieldInfoSize()>",
                "unchecked_exceptions": [],
                "methodName": "computeFieldInfoSize",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.FieldWriter: void <init>(org.objectweb.asm.SymbolTable,int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.FieldVisitor: void <init>(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.FieldWriter: void collectAttributePrototypes(org.objectweb.asm.Attribute$Set)>",
                "unchecked_exceptions": [],
                "methodName": "collectAttributePrototypes",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Attribute$Set: void addAttributes(org.objectweb.asm.Attribute)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.FieldWriter: void putFieldInfo(org.objectweb.asm.ByteVector)>",
                "unchecked_exceptions": [],
                "methodName": "putFieldInfo",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.Attribute: void putAttributes(org.objectweb.asm.SymbolTable,int,int,org.objectweb.asm.ByteVector)>",
                    "<org.objectweb.asm.AnnotationWriter: void putAnnotations(org.objectweb.asm.SymbolTable,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.ByteVector)>",
                    "<org.objectweb.asm.Attribute: void putAttributes(org.objectweb.asm.SymbolTable,org.objectweb.asm.ByteVector)>"
                ],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.FieldVisitor": [
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>",
                    "<java.lang.StringBuilder: void <init>()>",
                    "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.FieldVisitor: void <init>(int,org.objectweb.asm.FieldVisitor)>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [
                    "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.FieldVisitor: org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)>",
                "unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ],
                "methodName": "visitTypeAnnotation",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.FieldVisitor: void visitAttribute(org.objectweb.asm.Attribute)>",
                "unchecked_exceptions": [],
                "methodName": "visitAttribute",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.FieldVisitor: void visitAttribute(org.objectweb.asm.Attribute)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.FieldVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "visitAnnotation",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.FieldVisitor: void <init>(int)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.FieldVisitor: void <init>(int,org.objectweb.asm.FieldVisitor)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.FieldVisitor: void visitEnd()>",
                "unchecked_exceptions": [],
                "methodName": "visitEnd",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.FieldVisitor: void visitEnd()>"
                ],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.Edge": [
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Edge: void <init>(int,org.objectweb.asm.Label,org.objectweb.asm.Edge)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.CurrentFrame": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.CurrentFrame: void <init>(org.objectweb.asm.Label)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Frame: void <init>(org.objectweb.asm.Label)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.CurrentFrame: void execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)>",
                "unchecked_exceptions": [],
                "methodName": "execute",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Frame: void execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)>",
                    "<org.objectweb.asm.Frame: void <init>(org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.CurrentFrame: boolean merge(org.objectweb.asm.SymbolTable,org.objectweb.asm.Frame,int)>",
                    "<org.objectweb.asm.CurrentFrame: void copyFrom(org.objectweb.asm.Frame)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError",
                    "java.lang.IllegalArgumentException"
                ]
            }
        ]
    },
    {
        "org.objectweb.asm.Context": [
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Context: void <init>()>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.Constants": [
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Constants: void <init>()>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.ConstantDynamic": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ConstantDynamic: java.lang.String getDescriptor()>",
                "unchecked_exceptions": [],
                "methodName": "getDescriptor",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ConstantDynamic: int getSize()>",
                "unchecked_exceptions": [],
                "methodName": "getSize",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ConstantDynamic: java.lang.String getName()>",
                "unchecked_exceptions": [],
                "methodName": "getName",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ConstantDynamic: org.objectweb.asm.Handle getBootstrapMethod()>",
                "unchecked_exceptions": [],
                "methodName": "getBootstrapMethod",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ConstantDynamic: int getBootstrapMethodArgumentCount()>",
                "unchecked_exceptions": [],
                "methodName": "getBootstrapMethodArgumentCount",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ConstantDynamic: int hashCode()>",
                "unchecked_exceptions": [],
                "methodName": "hashCode",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ConstantDynamic: boolean equals(java.lang.Object)>",
                "unchecked_exceptions": [],
                "methodName": "equals",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.ConstantDynamic: void <init>(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ConstantDynamic: java.lang.Object getBootstrapMethodArgument(int)>",
                "unchecked_exceptions": [],
                "methodName": "getBootstrapMethodArgument",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.ConstantDynamic: java.lang.String toString()>",
                "unchecked_exceptions": [],
                "methodName": "toString",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ConstantDynamic: java.lang.Object[] getBootstrapMethodArgumentsUnsafe()>",
                "unchecked_exceptions": [],
                "methodName": "getBootstrapMethodArgumentsUnsafe",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.ClassWriter": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: void visitNestHost(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitNestHost",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: int newClass(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "newClass",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: int newMethodType(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "newMethodType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: void <init>(org.objectweb.asm.ClassReader,int)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ClassVisitor: void <init>(int)>",
                    "<org.objectweb.asm.SymbolTable: void <init>(org.objectweb.asm.ClassWriter)>",
                    "<org.objectweb.asm.SymbolTable: void <init>(org.objectweb.asm.ClassWriter,org.objectweb.asm.ClassReader)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: int newMethod(java.lang.String,java.lang.String,java.lang.String,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "newMethod",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: int newInvokeDynamic(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])>",
                "unchecked_exceptions": [],
                "methodName": "newInvokeDynamic",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: int newNameType(java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "newNameType",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>",
                "unchecked_exceptions": [],
                "methodName": "visit",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: void visitNestMember(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitNestMember",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void <init>()>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: org.objectweb.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>",
                "unchecked_exceptions": [],
                "methodName": "visitField",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.FieldWriter: void <init>(org.objectweb.asm.SymbolTable,int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitOuterClass",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: int newConstantDynamic(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])>",
                "unchecked_exceptions": [],
                "methodName": "newConstantDynamic",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: byte[] replaceAsmInstructions(byte[],boolean)>",
                "unchecked_exceptions": [],
                "methodName": "replaceAsmInstructions",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ClassReader: void <init>(byte[],int,boolean)>",
                    "<org.objectweb.asm.ClassReader: void accept(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Attribute[],int)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: int newHandle(int,java.lang.String,java.lang.String,java.lang.String,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "newHandle",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: void <init>(int)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ClassWriter: void <init>(org.objectweb.asm.ClassReader,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: org.objectweb.asm.Attribute[] getAttributePrototypes()>",
                "unchecked_exceptions": [],
                "methodName": "getAttributePrototypes",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Attribute$Set: void <init>()>",
                    "<org.objectweb.asm.Attribute$Set: void addAttributes(org.objectweb.asm.Attribute)>",
                    "<org.objectweb.asm.FieldWriter: void collectAttributePrototypes(org.objectweb.asm.Attribute$Set)>",
                    "<org.objectweb.asm.MethodWriter: void collectAttributePrototypes(org.objectweb.asm.Attribute$Set)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: int newPackage(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "newPackage",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: void visitAttribute(org.objectweb.asm.Attribute)>",
                "unchecked_exceptions": [],
                "methodName": "visitAttribute",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: int newHandle(int,java.lang.String,java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "newHandle",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: byte[] toByteArray()>",
                "unchecked_exceptions": [
                    "org.objectweb.asm.ClassTooLargeException"
                ],
                "methodName": "toByteArray",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>",
                    "<org.objectweb.asm.ClassTooLargeException: void <init>(java.lang.String,int)>",
                    "<org.objectweb.asm.ByteVector: void <init>(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>",
                    "<org.objectweb.asm.SymbolTable: void putConstantPool(org.objectweb.asm.ByteVector)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.FieldWriter: void putFieldInfo(org.objectweb.asm.ByteVector)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.MethodWriter: void putMethodInfo(org.objectweb.asm.ByteVector)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>",
                    "<org.objectweb.asm.AnnotationWriter: void putAnnotations(org.objectweb.asm.SymbolTable,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.ByteVector)>",
                    "<org.objectweb.asm.SymbolTable: void putBootstrapMethods(org.objectweb.asm.ByteVector)>",
                    "<org.objectweb.asm.ModuleWriter: void putAttributes(org.objectweb.asm.ByteVector)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>",
                    "<org.objectweb.asm.Attribute: void putAttributes(org.objectweb.asm.SymbolTable,org.objectweb.asm.ByteVector)>"
                ],
                "transitive_unchecked_exceptions": [
                    "org.objectweb.asm.ClassTooLargeException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: org.objectweb.asm.ModuleVisitor visitModule(java.lang.String,int,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitModule",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ModuleWriter: void <init>(org.objectweb.asm.SymbolTable,int,int,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "visitTypeAnnotation",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: void visitEnd()>",
                "unchecked_exceptions": [],
                "methodName": "visitEnd",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: int newConst(java.lang.Object)>",
                "unchecked_exceptions": [],
                "methodName": "newConst",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: java.lang.ClassLoader getClassLoader()>",
                "unchecked_exceptions": [],
                "methodName": "getClassLoader",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: void visitSource(java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitSource",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void <init>()>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.TypeNotPresentException: void <init>(java.lang.String,java.lang.Throwable)>",
                    "<java.lang.TypeNotPresentException: void <init>(java.lang.String,java.lang.Throwable)>"
                ],
                "methodSignature": "<org.objectweb.asm.ClassWriter: java.lang.String getCommonSuperClass(java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [
                    "java.lang.TypeNotPresentException",
                    "java.lang.TypeNotPresentException"
                ],
                "methodName": "getCommonSuperClass",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.TypeNotPresentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>",
                "unchecked_exceptions": [],
                "methodName": "visitMethod",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodWriter: void <init>(org.objectweb.asm.SymbolTable,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[],int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: int newModule(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "newModule",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: int newField(java.lang.String,java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "newField",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "visitAnnotation",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "newUTF8",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassWriter: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)>",
                "unchecked_exceptions": [],
                "methodName": "visitInnerClass",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void <init>()>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>"
                ],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.ClassVisitor": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassVisitor: void visitEnd()>",
                "unchecked_exceptions": [],
                "methodName": "visitEnd",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ClassVisitor: void visitEnd()>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.ClassVisitor: void visitNestMember(java.lang.String)>",
                "unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ],
                "methodName": "visitNestMember",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ClassVisitor: void visitNestMember(java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ]
            },
            {
                "external_method_calls": [
                    "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.ClassVisitor: org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)>",
                "unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ],
                "methodName": "visitTypeAnnotation",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ]
            },
            {
                "external_method_calls": [
                    "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.ClassVisitor: void visitNestHost(java.lang.String)>",
                "unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ],
                "methodName": "visitNestHost",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ClassVisitor: void visitNestHost(java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassVisitor: void visitAttribute(org.objectweb.asm.Attribute)>",
                "unchecked_exceptions": [],
                "methodName": "visitAttribute",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ClassVisitor: void visitAttribute(org.objectweb.asm.Attribute)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassVisitor: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)>",
                "unchecked_exceptions": [],
                "methodName": "visitInnerClass",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ClassVisitor: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassVisitor: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>",
                "unchecked_exceptions": [],
                "methodName": "visit",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ClassVisitor: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassVisitor: void <init>(int)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ClassVisitor: void <init>(int,org.objectweb.asm.ClassVisitor)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassVisitor: void visitSource(java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitSource",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ClassVisitor: void visitSource(java.lang.String,java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.ClassVisitor: org.objectweb.asm.ModuleVisitor visitModule(java.lang.String,int,java.lang.String)>",
                "unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ],
                "methodName": "visitModule",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "visitAnnotation",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassVisitor: org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>",
                "unchecked_exceptions": [],
                "methodName": "visitMethod",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassVisitor: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitOuterClass",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ClassVisitor: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassVisitor: org.objectweb.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>",
                "unchecked_exceptions": [],
                "methodName": "visitField",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>",
                    "<java.lang.StringBuilder: void <init>()>",
                    "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.ClassVisitor: void <init>(int,org.objectweb.asm.ClassVisitor)>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            }
        ]
    },
    {
        "org.objectweb.asm.ClassTooLargeException": [
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: void <init>()>",
                    "<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.ClassTooLargeException: void <init>(java.lang.String,int)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassTooLargeException: int getConstantPoolCount()>",
                "unchecked_exceptions": [],
                "methodName": "getConstantPoolCount",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassTooLargeException: java.lang.String getClassName()>",
                "unchecked_exceptions": [],
                "methodName": "getClassName",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.ClassReader": [
            {
                "external_method_calls": [
                    "<java.lang.IllegalArgumentException: void <init>()>",
                    "<java.lang.IllegalArgumentException: void <init>()>",
                    "<java.lang.AssertionError: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.ClassReader: void readCode(org.objectweb.asm.MethodVisitor,org.objectweb.asm.Context,int)>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException",
                    "java.lang.IllegalArgumentException",
                    "java.lang.AssertionError"
                ],
                "methodName": "readCode",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ClassReader: org.objectweb.asm.Label createLabel(int,org.objectweb.asm.Label[])>",
                    "<org.objectweb.asm.ClassReader: org.objectweb.asm.Label createLabel(int,org.objectweb.asm.Label[])>",
                    "<org.objectweb.asm.ClassReader: org.objectweb.asm.Label createLabel(int,org.objectweb.asm.Label[])>",
                    "<org.objectweb.asm.ClassReader: org.objectweb.asm.Label createLabel(int,org.objectweb.asm.Label[])>",
                    "<org.objectweb.asm.ClassReader: org.objectweb.asm.Label createLabel(int,org.objectweb.asm.Label[])>",
                    "<org.objectweb.asm.ClassReader: org.objectweb.asm.Label createLabel(int,org.objectweb.asm.Label[])>",
                    "<org.objectweb.asm.ClassReader: org.objectweb.asm.Label createLabel(int,org.objectweb.asm.Label[])>",
                    "<org.objectweb.asm.MethodVisitor: void visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String)>",
                    "<org.objectweb.asm.ClassReader: void createDebugLabel(int,org.objectweb.asm.Label[])>",
                    "<org.objectweb.asm.ClassReader: void createDebugLabel(int,org.objectweb.asm.Label[])>",
                    "<org.objectweb.asm.ClassReader: void createDebugLabel(int,org.objectweb.asm.Label[])>",
                    "<org.objectweb.asm.Label: void addLineNumber(int)>",
                    "<org.objectweb.asm.ClassReader: void computeImplicitFrame(org.objectweb.asm.Context)>",
                    "<org.objectweb.asm.ClassReader: org.objectweb.asm.Label createLabel(int,org.objectweb.asm.Label[])>",
                    "<org.objectweb.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>",
                    "<org.objectweb.asm.Label: void accept(org.objectweb.asm.MethodVisitor,boolean)>",
                    "<org.objectweb.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>",
                    "<org.objectweb.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>",
                    "<org.objectweb.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>",
                    "<org.objectweb.asm.MethodVisitor: void visitIntInsn(int,int)>",
                    "<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>",
                    "<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>",
                    "<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>",
                    "<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>",
                    "<org.objectweb.asm.MethodVisitor: void visitIincInsn(int,int)>",
                    "<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>",
                    "<org.objectweb.asm.MethodVisitor: void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])>",
                    "<org.objectweb.asm.MethodVisitor: void visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])>",
                    "<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>",
                    "<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>",
                    "<org.objectweb.asm.MethodVisitor: void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])>",
                    "<org.objectweb.asm.MethodVisitor: void visitIntInsn(int,int)>",
                    "<org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>",
                    "<org.objectweb.asm.MethodVisitor: void visitInsn(int)>",
                    "<org.objectweb.asm.MethodVisitor: void visitIincInsn(int,int)>",
                    "<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>",
                    "<org.objectweb.asm.MethodVisitor: void visitMultiANewArrayInsn(java.lang.String,int)>",
                    "<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>",
                    "<org.objectweb.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>",
                    "<org.objectweb.asm.ClassReader: int readElementValues(org.objectweb.asm.AnnotationVisitor,int,boolean,char[])>",
                    "<org.objectweb.asm.ClassReader: int readElementValues(org.objectweb.asm.AnnotationVisitor,int,boolean,char[])>",
                    "<org.objectweb.asm.MethodVisitor: void visitAttribute(org.objectweb.asm.Attribute)>",
                    "<org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)>",
                    "<org.objectweb.asm.ClassReader: int readElementValues(org.objectweb.asm.AnnotationVisitor,int,boolean,char[])>",
                    "<org.objectweb.asm.ClassReader: int readElementValues(org.objectweb.asm.AnnotationVisitor,int,boolean,char[])>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException",
                    "java.lang.AssertionError",
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>",
                    "<java.lang.StringBuilder: void <init>()>",
                    "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
                    "<java.lang.IllegalArgumentException: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.ClassReader: void <init>(byte[],int,boolean)>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException",
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: void <init>(java.io.InputStream)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [
                    "java.io.IOException"
                ],
                "internal_method_calls": [
                    "<org.objectweb.asm.ClassReader: void <init>(byte[])>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: java.lang.String getClassName()>",
                "unchecked_exceptions": [],
                "methodName": "getClassName",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: void createDebugLabel(int,org.objectweb.asm.Label[])>",
                "unchecked_exceptions": [],
                "methodName": "createDebugLabel",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: long readLong(int)>",
                "unchecked_exceptions": [],
                "methodName": "readLong",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: void computeImplicitFrame(org.objectweb.asm.Context)>",
                "unchecked_exceptions": [],
                "methodName": "computeImplicitFrame",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: java.lang.String[] getInterfaces()>",
                "unchecked_exceptions": [],
                "methodName": "getInterfaces",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.IllegalArgumentException: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.ClassReader: int readStackMapFrame(int,boolean,boolean,org.objectweb.asm.Context)>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "readStackMapFrame",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ClassReader: org.objectweb.asm.Label createLabel(int,org.objectweb.asm.Label[])>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>",
                "unchecked_exceptions": [],
                "methodName": "readUnsignedShort",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: java.lang.String getSuperName()>",
                "unchecked_exceptions": [],
                "methodName": "getSuperName",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: void <init>(byte[])>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ClassReader: void <init>(byte[],int,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: org.objectweb.asm.ConstantDynamic readConstantDynamic(int,char[])>",
                "unchecked_exceptions": [],
                "methodName": "readConstantDynamic",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ConstantDynamic: void <init>(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: java.lang.String readClass(int,char[])>",
                "unchecked_exceptions": [],
                "methodName": "readClass",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: int getMaxStringLength()>",
                "unchecked_exceptions": [],
                "methodName": "getMaxStringLength",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: void accept(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Attribute[],int)>",
                "unchecked_exceptions": [],
                "methodName": "accept",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Context: void <init>()>",
                    "<org.objectweb.asm.ClassVisitor: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>",
                    "<org.objectweb.asm.ClassVisitor: void visitSource(java.lang.String,java.lang.String)>",
                    "<org.objectweb.asm.ClassReader: void readModuleAttributes(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Context,int,int,java.lang.String)>",
                    "<org.objectweb.asm.ClassVisitor: void visitNestHost(java.lang.String)>",
                    "<org.objectweb.asm.ClassVisitor: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)>",
                    "<org.objectweb.asm.ClassVisitor: void visitAttribute(org.objectweb.asm.Attribute)>",
                    "<org.objectweb.asm.ClassVisitor: void visitNestMember(java.lang.String)>",
                    "<org.objectweb.asm.ClassVisitor: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)>",
                    "<org.objectweb.asm.ClassVisitor: void visitEnd()>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.UnsupportedOperationException"
                ]
            },
            {
                "external_method_calls": [
                    "<java.lang.IllegalArgumentException: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.ClassReader: java.lang.Object readConst(int,char[])>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "readConst",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Handle: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: void accept(org.objectweb.asm.ClassVisitor,int)>",
                "unchecked_exceptions": [],
                "methodName": "accept",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ClassReader: void accept(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Attribute[],int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: int getFirstAttributeOffset()>",
                "unchecked_exceptions": [],
                "methodName": "getFirstAttributeOffset",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: int readMethod(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Context,int)>",
                "unchecked_exceptions": [],
                "methodName": "readMethod",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodWriter: void setMethodAttributesSource(int,int)>",
                    "<org.objectweb.asm.MethodVisitor: void visitParameter(java.lang.String,int)>",
                    "<org.objectweb.asm.ClassReader: int readElementValue(org.objectweb.asm.AnnotationVisitor,int,java.lang.String,char[])>",
                    "<org.objectweb.asm.AnnotationVisitor: void visitEnd()>",
                    "<org.objectweb.asm.ClassReader: void readParameterAnnotations(org.objectweb.asm.MethodVisitor,org.objectweb.asm.Context,int,boolean)>",
                    "<org.objectweb.asm.ClassReader: void readParameterAnnotations(org.objectweb.asm.MethodVisitor,org.objectweb.asm.Context,int,boolean)>",
                    "<org.objectweb.asm.MethodVisitor: void visitAttribute(org.objectweb.asm.Attribute)>",
                    "<org.objectweb.asm.MethodVisitor: void visitCode()>",
                    "<org.objectweb.asm.ClassReader: void readCode(org.objectweb.asm.MethodVisitor,org.objectweb.asm.Context,int)>",
                    "<org.objectweb.asm.MethodVisitor: void visitEnd()>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.AssertionError",
                    "java.lang.UnsupportedOperationException",
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: java.lang.String readUtf(int,char[])>",
                "unchecked_exceptions": [],
                "methodName": "readUtf",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>",
                "unchecked_exceptions": [],
                "methodName": "readUTF8",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: int getAccess()>",
                "unchecked_exceptions": [],
                "methodName": "getAccess",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: org.objectweb.asm.Attribute readAttribute(org.objectweb.asm.Attribute[],java.lang.String,int,int,char[],int,org.objectweb.asm.Label[])>",
                "unchecked_exceptions": [],
                "methodName": "readAttribute",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Attribute: void <init>(java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: short readShort(int)>",
                "unchecked_exceptions": [],
                "methodName": "readShort",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.IllegalArgumentException: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.ClassReader: int[] readBootstrapMethodsAttribute(int)>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "readBootstrapMethodsAttribute",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [
                    "<java.lang.IllegalArgumentException: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.ClassReader: int readVerificationTypeInfo(int,java.lang.Object[],int,char[],org.objectweb.asm.Label[])>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "readVerificationTypeInfo",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: int getItemCount()>",
                "unchecked_exceptions": [],
                "methodName": "getItemCount",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: int getItem(int)>",
                "unchecked_exceptions": [],
                "methodName": "getItem",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.IllegalArgumentException: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.ClassReader: int[] readTypeAnnotations(org.objectweb.asm.MethodVisitor,org.objectweb.asm.Context,int,boolean)>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "readTypeAnnotations",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ClassReader: org.objectweb.asm.Label createLabel(int,org.objectweb.asm.Label[])>",
                    "<org.objectweb.asm.ClassReader: org.objectweb.asm.Label createLabel(int,org.objectweb.asm.Label[])>",
                    "<org.objectweb.asm.TypePath: void <init>(byte[],int)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: void readModuleAttributes(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Context,int,int,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "readModuleAttributes",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ModuleVisitor: void visitMainClass(java.lang.String)>",
                    "<org.objectweb.asm.ModuleVisitor: void visitPackage(java.lang.String)>",
                    "<org.objectweb.asm.ModuleVisitor: void visitRequire(java.lang.String,int,java.lang.String)>",
                    "<org.objectweb.asm.ModuleVisitor: void visitExport(java.lang.String,int,java.lang.String[])>",
                    "<org.objectweb.asm.ModuleVisitor: void visitOpen(java.lang.String,int,java.lang.String[])>",
                    "<org.objectweb.asm.ModuleVisitor: void visitUse(java.lang.String)>",
                    "<org.objectweb.asm.ModuleVisitor: void visitProvide(java.lang.String,java.lang.String[])>",
                    "<org.objectweb.asm.ModuleVisitor: void visitEnd()>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: org.objectweb.asm.Label createLabel(int,org.objectweb.asm.Label[])>",
                "unchecked_exceptions": [],
                "methodName": "createLabel",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: java.lang.String readPackage(int,char[])>",
                "unchecked_exceptions": [],
                "methodName": "readPackage",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: int readField(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Context,int)>",
                "unchecked_exceptions": [],
                "methodName": "readField",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.FieldVisitor: void visitAttribute(org.objectweb.asm.Attribute)>",
                    "<org.objectweb.asm.FieldVisitor: void visitEnd()>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.IllegalArgumentException: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.ClassReader: int readTypeAnnotationTarget(org.objectweb.asm.Context,int)>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "readTypeAnnotationTarget",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.TypePath: void <init>(byte[],int)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [
                    "<java.io.IOException: void <init>(java.lang.String)>",
                    "<java.io.ByteArrayOutputStream: void <init>()>",
                    "<java.io.ByteArrayOutputStream: void write(byte[],int,int)>",
                    "<java.io.ByteArrayOutputStream: void close()>",
                    "<java.io.InputStream: void close()>",
                    "<java.io.ByteArrayOutputStream: void close()>",
                    "<java.io.ByteArrayOutputStream: void flush()>",
                    "<java.io.ByteArrayOutputStream: void close()>",
                    "<java.io.ByteArrayOutputStream: void close()>",
                    "<java.io.InputStream: void close()>"
                ],
                "methodSignature": "<org.objectweb.asm.ClassReader: byte[] readStream(java.io.InputStream,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "readStream",
                "checked_exceptions": [
                    "java.io.IOException"
                ],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.IllegalArgumentException: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.ClassReader: int readElementValue(org.objectweb.asm.AnnotationVisitor,int,java.lang.String,char[])>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "readElementValue",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>",
                    "<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>",
                    "<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>",
                    "<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>",
                    "<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>",
                    "<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>",
                    "<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>",
                    "<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>",
                    "<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>",
                    "<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>",
                    "<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>",
                    "<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>",
                    "<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>",
                    "<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>",
                    "<org.objectweb.asm.AnnotationVisitor: void visitEnum(java.lang.String,java.lang.String,java.lang.String)>",
                    "<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: int readInt(int)>",
                "unchecked_exceptions": [],
                "methodName": "readInt",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.StringBuilder: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.ClassReader: void <init>(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [
                    "java.io.IOException"
                ],
                "internal_method_calls": [
                    "<org.objectweb.asm.ClassReader: void <init>(byte[])>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: int readElementValues(org.objectweb.asm.AnnotationVisitor,int,boolean,char[])>",
                "unchecked_exceptions": [],
                "methodName": "readElementValues",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.AnnotationVisitor: void visitEnd()>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: org.objectweb.asm.Label readLabel(int,org.objectweb.asm.Label[])>",
                "unchecked_exceptions": [],
                "methodName": "readLabel",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Label: void <init>()>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: int getTypeAnnotationBytecodeOffset(int[],int)>",
                "unchecked_exceptions": [],
                "methodName": "getTypeAnnotationBytecodeOffset",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: void readParameterAnnotations(org.objectweb.asm.MethodVisitor,org.objectweb.asm.Context,int,boolean)>",
                "unchecked_exceptions": [],
                "methodName": "readParameterAnnotations",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.MethodVisitor: void visitAnnotableParameterCount(int,boolean)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: int readByte(int)>",
                "unchecked_exceptions": [],
                "methodName": "readByte",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: java.lang.String readStringish(int,char[])>",
                "unchecked_exceptions": [],
                "methodName": "readStringish",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: java.lang.String readModule(int,char[])>",
                "unchecked_exceptions": [],
                "methodName": "readModule",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.String: void <init>(char[],int,int)>"
                ],
                "methodSignature": "<org.objectweb.asm.ClassReader: java.lang.String readUtf(int,int,char[])>",
                "unchecked_exceptions": [],
                "methodName": "readUtf",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ClassReader: void <init>(byte[],int,int)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ClassReader: void <init>(byte[],int,boolean)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            }
        ]
    },
    {
        "org.objectweb.asm.ByteVector": [
            {
                "external_method_calls": [
                    "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putUTF8(java.lang.String)>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "putUTF8",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void enlarge(int)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.ByteVector: void <init>(byte[])>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put112(int,int,int)>",
                "unchecked_exceptions": [],
                "methodName": "put112",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void enlarge(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>",
                "unchecked_exceptions": [],
                "methodName": "putInt",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void enlarge(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                "unchecked_exceptions": [],
                "methodName": "put12",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void enlarge(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put122(int,int,int)>",
                "unchecked_exceptions": [],
                "methodName": "put122",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void enlarge(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"
                ],
                "methodSignature": "<org.objectweb.asm.ByteVector: void enlarge(int)>",
                "unchecked_exceptions": [],
                "methodName": "enlarge",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.ByteVector: void <init>()>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>",
                "unchecked_exceptions": [],
                "methodName": "putByte",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void enlarge(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                "unchecked_exceptions": [],
                "methodName": "putShort",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void enlarge(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put11(int,int)>",
                "unchecked_exceptions": [],
                "methodName": "put11",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void enlarge(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"
                ],
                "methodSignature": "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>",
                "unchecked_exceptions": [],
                "methodName": "putByteArray",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void enlarge(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putLong(long)>",
                "unchecked_exceptions": [],
                "methodName": "putLong",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void enlarge(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.ByteVector: void <init>(int)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector encodeUtf8(java.lang.String,int,int)>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "encodeUtf8",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void enlarge(int)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            }
        ]
    },
    {
        "org.objectweb.asm.Attribute": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Attribute: void putAttributes(org.objectweb.asm.SymbolTable,int,int,org.objectweb.asm.ByteVector)>",
                "unchecked_exceptions": [],
                "methodName": "putAttributes",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Attribute: org.objectweb.asm.ByteVector write(org.objectweb.asm.ClassWriter,byte[],int,int,int)>",
                "unchecked_exceptions": [],
                "methodName": "write",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void <init>(byte[])>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Attribute: int computeAttributesSize(org.objectweb.asm.SymbolTable,byte[],int,int,int)>",
                "unchecked_exceptions": [],
                "methodName": "computeAttributesSize",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Attribute: int computeAttributesSize(org.objectweb.asm.SymbolTable,int,int)>",
                "unchecked_exceptions": [],
                "methodName": "computeAttributesSize",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>",
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Attribute: org.objectweb.asm.Label[] getLabels()>",
                "unchecked_exceptions": [],
                "methodName": "getLabels",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Attribute: void putAttributes(org.objectweb.asm.SymbolTable,byte[],int,int,int,org.objectweb.asm.ByteVector)>",
                "unchecked_exceptions": [],
                "methodName": "putAttributes",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Attribute: boolean isUnknown()>",
                "unchecked_exceptions": [],
                "methodName": "isUnknown",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Attribute: boolean isCodeAttribute()>",
                "unchecked_exceptions": [],
                "methodName": "isCodeAttribute",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Attribute: int getAttributeCount()>",
                "unchecked_exceptions": [],
                "methodName": "getAttributeCount",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Attribute: void putAttributes(org.objectweb.asm.SymbolTable,org.objectweb.asm.ByteVector)>",
                "unchecked_exceptions": [],
                "methodName": "putAttributes",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Attribute: void putAttributes(org.objectweb.asm.SymbolTable,byte[],int,int,int,org.objectweb.asm.ByteVector)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"
                ],
                "methodSignature": "<org.objectweb.asm.Attribute: org.objectweb.asm.Attribute read(org.objectweb.asm.ClassReader,int,int,char[],int,org.objectweb.asm.Label[])>",
                "unchecked_exceptions": [],
                "methodName": "read",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Attribute: void <init>(java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Attribute: void <init>(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Attribute: int computeAttributesSize(org.objectweb.asm.SymbolTable)>",
                "unchecked_exceptions": [],
                "methodName": "computeAttributesSize",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.Attribute$Set": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Attribute$Set: void addAttributes(org.objectweb.asm.Attribute)>",
                "unchecked_exceptions": [],
                "methodName": "addAttributes",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.Attribute$Set: void add(org.objectweb.asm.Attribute)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.Attribute$Set: boolean contains(org.objectweb.asm.Attribute)>",
                "unchecked_exceptions": [],
                "methodName": "contains",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"
                ],
                "methodSignature": "<org.objectweb.asm.Attribute$Set: org.objectweb.asm.Attribute[] toArray()>",
                "unchecked_exceptions": [],
                "methodName": "toArray",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"
                ],
                "methodSignature": "<org.objectweb.asm.Attribute$Set: void add(org.objectweb.asm.Attribute)>",
                "unchecked_exceptions": [],
                "methodName": "add",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>"
                ],
                "methodSignature": "<org.objectweb.asm.Attribute$Set: void <init>()>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.AnnotationWriter": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.AnnotationWriter: void <init>(org.objectweb.asm.SymbolTable,boolean,org.objectweb.asm.ByteVector,org.objectweb.asm.AnnotationWriter)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.AnnotationVisitor: void <init>(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.AnnotationWriter: void putAnnotations(org.objectweb.asm.SymbolTable,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.ByteVector)>",
                "unchecked_exceptions": [],
                "methodName": "putAnnotations",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.AnnotationWriter: void putAnnotations(int,org.objectweb.asm.ByteVector)>",
                    "<org.objectweb.asm.AnnotationWriter: void putAnnotations(int,org.objectweb.asm.ByteVector)>",
                    "<org.objectweb.asm.AnnotationWriter: void putAnnotations(int,org.objectweb.asm.ByteVector)>",
                    "<org.objectweb.asm.AnnotationWriter: void putAnnotations(int,org.objectweb.asm.ByteVector)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.AnnotationWriter: void putParameterAnnotations(int,org.objectweb.asm.AnnotationWriter[],int,org.objectweb.asm.ByteVector)>",
                "unchecked_exceptions": [],
                "methodName": "putParameterAnnotations",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>",
                    "<org.objectweb.asm.AnnotationWriter: void visitEnd()>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.AnnotationWriter: org.objectweb.asm.AnnotationWriter create(org.objectweb.asm.SymbolTable,int,org.objectweb.asm.TypePath,java.lang.String,org.objectweb.asm.AnnotationWriter)>",
                "unchecked_exceptions": [],
                "methodName": "create",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void <init>()>",
                    "<org.objectweb.asm.TypeReference: void putTarget(int,org.objectweb.asm.ByteVector)>",
                    "<org.objectweb.asm.TypePath: void put(org.objectweb.asm.TypePath,org.objectweb.asm.ByteVector)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.AnnotationWriter: void <init>(org.objectweb.asm.SymbolTable,boolean,org.objectweb.asm.ByteVector,org.objectweb.asm.AnnotationWriter)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.AnnotationWriter: void putAnnotations(int,org.objectweb.asm.ByteVector)>",
                "unchecked_exceptions": [],
                "methodName": "putAnnotations",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.AnnotationWriter: void visitEnd()>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.AnnotationWriter: void visitEnum(java.lang.String,java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitEnum",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.AnnotationWriter: void visitEnd()>",
                "unchecked_exceptions": [],
                "methodName": "visitEnd",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.AnnotationWriter: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitAnnotation",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.AnnotationWriter: void <init>(org.objectweb.asm.SymbolTable,boolean,org.objectweb.asm.ByteVector,org.objectweb.asm.AnnotationWriter)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)>",
                "unchecked_exceptions": [],
                "methodName": "visit",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.AnnotationWriter: org.objectweb.asm.AnnotationVisitor visitArray(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitArray",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>",
                    "<org.objectweb.asm.AnnotationWriter: void <init>(org.objectweb.asm.SymbolTable,boolean,org.objectweb.asm.ByteVector,org.objectweb.asm.AnnotationWriter)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.AnnotationWriter: int computeAnnotationsSize(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "computeAnnotationsSize",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.AnnotationWriter: int computeAnnotationsSize(org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter)>",
                "unchecked_exceptions": [],
                "methodName": "computeAnnotationsSize",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.AnnotationWriter: int computeParameterAnnotationsSize(java.lang.String,org.objectweb.asm.AnnotationWriter[],int)>",
                "unchecked_exceptions": [],
                "methodName": "computeParameterAnnotationsSize",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.AnnotationWriter: org.objectweb.asm.AnnotationWriter create(org.objectweb.asm.SymbolTable,java.lang.String,org.objectweb.asm.AnnotationWriter)>",
                "unchecked_exceptions": [],
                "methodName": "create",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.ByteVector: void <init>()>",
                    "<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>",
                    "<org.objectweb.asm.AnnotationWriter: void <init>(org.objectweb.asm.SymbolTable,boolean,org.objectweb.asm.ByteVector,org.objectweb.asm.AnnotationWriter)>"
                ],
                "transitive_unchecked_exceptions": []
            }
        ]
    },
    {
        "org.objectweb.asm.AnnotationVisitor": [
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>",
                "unchecked_exceptions": [],
                "methodName": "visit",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.AnnotationVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitAnnotation",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.AnnotationVisitor: void <init>(int)>",
                "unchecked_exceptions": [],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.AnnotationVisitor: void <init>(int,org.objectweb.asm.AnnotationVisitor)>"
                ],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.AnnotationVisitor: void visitEnum(java.lang.String,java.lang.String,java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitEnum",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.AnnotationVisitor: void visitEnum(java.lang.String,java.lang.String,java.lang.String)>"
                ],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [
                    "<java.lang.Object: void <init>()>",
                    "<java.lang.StringBuilder: void <init>()>",
                    "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>"
                ],
                "methodSignature": "<org.objectweb.asm.AnnotationVisitor: void <init>(int,org.objectweb.asm.AnnotationVisitor)>",
                "unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ],
                "methodName": "<init>",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": [
                    "java.lang.IllegalArgumentException"
                ]
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.AnnotationVisitor: org.objectweb.asm.AnnotationVisitor visitArray(java.lang.String)>",
                "unchecked_exceptions": [],
                "methodName": "visitArray",
                "checked_exceptions": [],
                "internal_method_calls": [],
                "transitive_unchecked_exceptions": []
            },
            {
                "external_method_calls": [],
                "methodSignature": "<org.objectweb.asm.AnnotationVisitor: void visitEnd()>",
                "unchecked_exceptions": [],
                "methodName": "visitEnd",
                "checked_exceptions": [],
                "internal_method_calls": [
                    "<org.objectweb.asm.AnnotationVisitor: void visitEnd()>"
                ],
                "transitive_unchecked_exceptions": []
            }
        ]
    }
]